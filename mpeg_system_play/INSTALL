*************************************************************
*  MPEG-I MULTI-STREAM SYSTEM-LAYER DECODER                 *
*************************************************************
Developed by 

James Boucher(jboucher@flash.bu.edu)
Ziv Yaar(zyaar@bu.edu)             
Elisa Rubin(erubin@acs.bu.edu)     
John Palmer(palmerj@acs.bu.edu)    
                                   
Multimedia Communications Lab      
Boston University                  
mcl@spiderman.bu.edu                   

INSTALLATION GUIDE

OVERVIEW:

The first step is to 'untar' and decompress the file:
  mpeg_system_play_v1.0.tar.Z

The ./mpeg_system_play directory structure contains 6 sub-directories:

./system_play    - System layer player source code
./streams        - test bitstreams
./utilities      - Utilities (test, fps_convert)
./bin            - precompiled executables
./docs           - postscript user's guide

DECODER:

The installation of the decoder/player is performed in three steps:

1) Compilation of mpeg_play2 and copying it into the path.
2) Compilation of maplay2 and copying it into the path.
3) Compilation of system_play.

The system_play program execs the mpeg_play2 and maplay2 programs so
you need to have these executables in your current path. The maplay2
is a modified version of maplay written by Tobias Bading of the
Technical University of Berlin. The mpeg_play2 is a modified version
of the Berkeley Group's mpeg_play2.0. This version has been modified
to provide real-time video playback of an MPEG-I video stream, basd
upon the frame rate parameter included in the sequence header.  This
is achieved with an adaptive frame dropping algorthm.

NOTE: The video player can be compiled without the SYSTEM_PLAY switch
to provide a real-time MPEG-I video only player that functions outside
the context of system_play.  It can be copied into mpeg_playRT and
used as:

  mpeg_playRT -realtime video_filename

Without the -realtime switch it will act like mpeg_play v2.0.

STEP 1:

The mpeg_play2 executable can be generated by first editing the
Makefile for your given platform. Type 'make'.  Finally, copy
mpeg_play2 into your current path so the exec statement will be able
to find it. As mentioned above, if you remove the -DSYSTEM_PLAY from
the makefile you will have a real-time MPEG-I video player for video
only streams.  It will adapt to the frame rate stated in the sequence
header.  The mpeg_encode1.3 for Berkeley will allow you to set the
FRAME_RATE of the bitstream in the sequence header. If you can't
capture at frame rates of 24,25,30,50, or 60 frames per second, you
can use the fps_convert utility to convert a set of still images
recorded at, for example, 15 fps to 24 or more(or less).

STEP 2:

The maplay2 executables is made by first editing the file
configuration.sh and then typing:

  sh configuration.sh

Copy this to your path too. 

STEP 3:

Edit the Makefile to ensure the correct platform switch is
declared. Ensure -DINDIGO is added for SGI's. If you wish to try to
compile on a system without supported audio, change -DINDIGO to
-DNONE. This will disable the writing of audio to a device. Note you
can still save mixed audio to a file via the interface or the command
line.  Copy the executable to your path if you wish.  You can savely
ignore any compiler warnings which involve the 'volatile' keyword.

UTILITIES:

test:

The test program will split up a system layer stream generated with
system_encode(or any other utility) into its separate compression
layer files. This is the reverse of the encoding process.  It will
also generate a list of file related information, which will allow
researchers to examine the stream. To compile this, copy demux.c and
system.h into the ./misc directory.  Then do the following:

Compile and link:
  cc -c test.c
  cc -c demux.c
  cc -o test demux.o test.o

Run the application:
  test

fps_convert:

This program will take sets of still images captured at one frame rate
and generate a set of still images at a greater or lesser frame
rate. Usage is included.  Do the following:

Compile and link:
  cc -o fps_convert fps_convert.c

Run the application:
  fps_convert


PORTING TO OTHER SYSTEMS:

Decoder/Player:

The mpeg_play2 and maplay2 programs are compilable on a wide range of
systems.  The system_play program uses both shared memory and a
semaphore.  If your platform does not support these SYSTEM V
structures, you may need to surgically remove these and run the code
in non-synchronized mode.

Good luck.
